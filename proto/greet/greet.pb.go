// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/greet/greet.proto

package greet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GreetInbound struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetInbound) Reset()         { *m = GreetInbound{} }
func (m *GreetInbound) String() string { return proto.CompactTextString(m) }
func (*GreetInbound) ProtoMessage()    {}
func (*GreetInbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_greet_d261c35b1bfe66d3, []int{0}
}
func (m *GreetInbound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetInbound.Unmarshal(m, b)
}
func (m *GreetInbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetInbound.Marshal(b, m, deterministic)
}
func (dst *GreetInbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetInbound.Merge(dst, src)
}
func (m *GreetInbound) XXX_Size() int {
	return xxx_messageInfo_GreetInbound.Size(m)
}
func (m *GreetInbound) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetInbound.DiscardUnknown(m)
}

var xxx_messageInfo_GreetInbound proto.InternalMessageInfo

func (m *GreetInbound) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GreetOutbound struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetOutbound) Reset()         { *m = GreetOutbound{} }
func (m *GreetOutbound) String() string { return proto.CompactTextString(m) }
func (*GreetOutbound) ProtoMessage()    {}
func (*GreetOutbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_greet_d261c35b1bfe66d3, []int{1}
}
func (m *GreetOutbound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetOutbound.Unmarshal(m, b)
}
func (m *GreetOutbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetOutbound.Marshal(b, m, deterministic)
}
func (dst *GreetOutbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetOutbound.Merge(dst, src)
}
func (m *GreetOutbound) XXX_Size() int {
	return xxx_messageInfo_GreetOutbound.Size(m)
}
func (m *GreetOutbound) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetOutbound.DiscardUnknown(m)
}

var xxx_messageInfo_GreetOutbound proto.InternalMessageInfo

func (m *GreetOutbound) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GreetInbound)(nil), "greet.GreetInbound")
	proto.RegisterType((*GreetOutbound)(nil), "greet.GreetOutbound")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreetClient is the client API for Greet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreetClient interface {
	Greet(ctx context.Context, in *GreetInbound, opts ...grpc.CallOption) (*GreetOutbound, error)
}

type greetClient struct {
	cc *grpc.ClientConn
}

func NewGreetClient(cc *grpc.ClientConn) GreetClient {
	return &greetClient{cc}
}

func (c *greetClient) Greet(ctx context.Context, in *GreetInbound, opts ...grpc.CallOption) (*GreetOutbound, error) {
	out := new(GreetOutbound)
	err := c.cc.Invoke(ctx, "/greet.Greet/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetServer is the server API for Greet service.
type GreetServer interface {
	Greet(context.Context, *GreetInbound) (*GreetOutbound, error)
}

func RegisterGreetServer(s *grpc.Server, srv GreetServer) {
	s.RegisterService(&_Greet_serviceDesc, srv)
}

func _Greet_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Greet/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServer).Greet(ctx, req.(*GreetInbound))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.Greet",
	HandlerType: (*GreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _Greet_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/greet/greet.proto",
}

func init() { proto.RegisterFile("proto/greet/greet.proto", fileDescriptor_greet_d261c35b1bfe66d3) }

var fileDescriptor_greet_d261c35b1bfe66d3 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x2f, 0x4a, 0x4d, 0x2d, 0x81, 0x90, 0x7a, 0x60, 0x11, 0x21, 0x56, 0x30, 0x47,
	0x49, 0x83, 0x8b, 0xc7, 0x1d, 0xc4, 0xf0, 0xcc, 0x4b, 0xca, 0x2f, 0xcd, 0x4b, 0x11, 0x92, 0xe0,
	0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82,
	0x71, 0x95, 0x34, 0xb9, 0x78, 0xc1, 0x2a, 0xfd, 0x4b, 0x4b, 0x08, 0x28, 0x35, 0xb2, 0xe6, 0x62,
	0x05, 0x2b, 0x15, 0x32, 0x82, 0x31, 0x84, 0xf5, 0x20, 0x76, 0x23, 0xdb, 0x25, 0x25, 0x82, 0x2c,
	0x08, 0x33, 0x36, 0x89, 0x0d, 0xec, 0x3e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x12,
	0xd9, 0xe4, 0xba, 0x00, 0x00, 0x00,
}
